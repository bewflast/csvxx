#include    <Windows.h>
#include    <iostream>
#include    <unordered_set>

#if !defined (get16bits)
#define get16bits(d) ((((uint32_t)(((const uint8_t *)(d))[1])) << 8)\
                       +(uint32_t)(((const uint8_t *)(d))[0]) )
#endif
uint32_t SuperFastHash (char * data, int len) {
    uint32_t hash = len, tmp;
    int rem;
    if (len <= 0 || data == NULL) return 0;
    rem = len & 3;
    len >>= 2;
    for (;len > 0; len--) {
        hash  += get16bits (data);
        tmp    = (get16bits (data+2) << 11) ^ hash;
        hash   = (hash << 16) ^ tmp;
        data  += 2*sizeof (uint16_t);
        hash  += hash >> 11;
    }
    switch (rem) {
        case 3: hash += get16bits (data);
                hash ^= hash << 16;
                hash ^= ((signed char)data[sizeof (uint16_t)]) << 18;
                hash += hash >> 11;
                break;
        case 2: hash += get16bits (data);
                hash ^= hash << 11;
                hash += hash >> 17;
                break;
        case 1: hash += (signed char)*data;
                hash ^= hash << 10;
                hash += hash >> 1;
    }

    /* Force "avalanching" of final 127 bits */
    hash ^= hash << 3;
    hash += hash >> 5;
    hash ^= hash << 4;
    hash += hash >> 17;
    hash ^= hash << 25;
    hash += hash >> 6;

    return hash;
}

bool    csvGetLine(char* buffer,char** csvPtr, size_t bufLen,char* dataPtr, uint32_t* len)
{
    if (!*dataPtr)
        return (false);
    uint32_t i = 0;
    std::memset(static_cast<void*>(buffer), '\0', bufLen);
    for (; i < bufLen && *dataPtr != '\n'; i++)
    {
        buffer[i] = *dataPtr;
        dataPtr++;
    }
    *len = i;
    dataPtr++;
    *csvPtr = dataPtr;
    return (true);
}

int main(int argc, char* argv[])
{
    DWORD           fSize   (0);
    HANDLE          file    (nullptr);
    HANDLE          fileMap (nullptr);
    char*  dataPtr (nullptr);

    std::unordered_set<uint32_t> lines;

    file    = CreateFile("b.csv", GENERIC_READ | GENERIC_WRITE | GENERIC_EXECUTE, 0, nullptr, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, nullptr);
    std::cout << GetLastError() << std::endl;
    fSize   = GetFileSize(file, nullptr);
    std::cout << GetLastError() << std::endl;
    fileMap = CreateFileMapping(file, nullptr, PAGE_EXECUTE_READWRITE, 0, 0, "KEGA");
    std::cout << GetLastError() << std::endl;
    dataPtr = reinterpret_cast<char*>(MapViewOfFile(OpenFileMapping(FILE_MAP_ALL_ACCESS, FALSE, "KEGA"), FILE_MAP_ALL_ACCESS, 0, 0, fSize));
    
    char   buffer[512];
    uint32_t len(0);
    unsigned long i = 0;
    while(csvGetLine(buffer, &dataPtr, 512, dataPtr, &len))
    {
        lines.insert(SuperFastHash(buffer, len));
        i++;
        if (!(i % 100000))
            std::cout << i << std::endl;
    }

    std::cout << lines.size() << " " << i << std::endl;
    
    return (0);
}